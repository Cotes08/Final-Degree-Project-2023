/* eslint-disable no-eval */
/* eslint-disable no-unused-vars */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React from "react";
import * as THREE from "three";
import { useGLTF } from "@react-three/drei";
import { useTrimesh } from '@react-three/cannon';
import { useFrame } from "@react-three/fiber";

export function CasaUsr({ position, scale, color }) {
    
    const colorMaterial = new THREE.MeshBasicMaterial({ color: color });
    const { nodes, materials } = useGLTF("./Modelos/Casas/casaUsr.glb");


    const vertices0 = nodes.House_Cube028_1.geometry.attributes.position.array;
    const scaledVertices0 = vertices0.map((v) => v * scale);

    const [ref0, api0] = useTrimesh(() => ({
        args: [
            scaledVertices0,
            nodes.House_Cube028_1.geometry.index.array
        ],
        mass: 1,
        type: 'Static',
    }));



    const vertices1 = nodes.House_Cube028_1_1.geometry.attributes.position.array;
    const scaledVertices1 = vertices1.map((v) => v * scale);

    const [ref1, api1] = useTrimesh(() => ({
        args: [
            scaledVertices1,
            nodes.House_Cube028_1_1.geometry.index.array
        ],
        mass: 1,
        type: 'Static',
    }));



    const vertices2 = nodes.House_Cube028_1_2.geometry.attributes.position.array;
    const scaledVertices2 = vertices2.map((v) => v * scale);

    const [ref2, api2] = useTrimesh(() => ({
        args: [
            scaledVertices2,
            nodes.House_Cube028_1_2.geometry.index.array
        ],
        mass: 1,
        type: 'Static',
    }));



    const vertices3 = nodes.House_Cube028_1_3.geometry.attributes.position.array;
    const scaledVertices3 = vertices3.map((v) => v * scale);

    const [ref3, api3] = useTrimesh(() => ({
        args: [
            scaledVertices3,
            nodes.House_Cube028_1_3.geometry.index.array
        ],
        mass: 1,
        type: 'Static',
    }));



    const vertices4 = nodes.House_Cube028_1_4.geometry.attributes.position.array;
    const scaledVertices4 = vertices4.map((v) => v * scale);

    const [ref4, api4] = useTrimesh(() => ({
        args: [
            scaledVertices4,
            nodes.House_Cube028_1_4.geometry.index.array
        ],
        mass: 1,
        type: 'Static',
    }));



    const vertices5 = nodes.House_Cube028_1_5.geometry.attributes.position.array;
    const scaledVertices5 = vertices5.map((v) => v * scale);

    const [ref5, api5] = useTrimesh(() => ({
        args: [
            scaledVertices5,
            nodes.House_Cube028_1_5.geometry.index.array
        ],
        mass: 1,
        type: 'Static',
    }));



    const vertices6 = nodes.House_Cube028_1_6.geometry.attributes.position.array;
    const scaledVertices6 = vertices6.map((v) => v * scale);

    const [ref6, api6] = useTrimesh(() => ({
        args: [
            scaledVertices6,
            nodes.House_Cube028_1_6.geometry.index.array
        ],
        mass: 1,
        type: 'Static',
    }));

    //Movemos tanto los objetos como las fisicas
    useFrame(() => {
        for (let i = 0; i <= 6; i++) {
            let api = eval(`api${i}`);
            api.position.set(position[0], position[1], position[2]);
        }
    });



    return (
        <group dispose={null} position={[0, 0, -3.326]} scale={scale}>
            <mesh
                ref={ref0}
                castShadow
                receiveShadow
                geometry={nodes.House_Cube028_1.geometry}
                material={colorMaterial}
            />
            <mesh
                ref={ref1}
                castShadow
                receiveShadow
                geometry={nodes.House_Cube028_1_1.geometry}
                material={materials["795548"]}
            />
            <mesh
                ref={ref2}
                castShadow
                receiveShadow
                geometry={nodes.House_Cube028_1_2.geometry}
                material={materials.FFCC88}
            />
            <mesh
                ref={ref3}
                castShadow
                receiveShadow
                geometry={nodes.House_Cube028_1_3.geometry}
                material={materials["80DEEA"]}
            />
            <mesh
                ref={ref4}
                castShadow
                receiveShadow
                geometry={nodes.House_Cube028_1_4.geometry}
                material={materials.FFFFFF}
            />
            <mesh
                ref={ref5}
                castShadow
                receiveShadow
                geometry={nodes.House_Cube028_1_5.geometry}
                material={materials.FFCC88}
            />
            <mesh
                ref={ref6}
                castShadow
                receiveShadow
                geometry={nodes.House_Cube028_1_6.geometry}
                material={materials.FF9800}
            />
        </group>
    );
}

useGLTF.preload("./Modelos/Casas/casaUsr.glb");