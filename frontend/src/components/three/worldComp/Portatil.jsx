/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import * as THREE from "three";
import { useEffect, useState } from "react";
import Axios from 'axios';
import MensajesUsr from "./Modals/MensajesUsr";


const posicionPortatil = [4, 0.82, -4];

export function Portatil({ color, PlayerApi }) {
    const { nodes, materials } = useGLTF("./Modelos/Portatil.glb");
    const colorMaterial = new THREE.MeshBasicMaterial({ color: color });
    const playerPosition = useRef([0, 0, 0]);
    const [idUsuario, setIdUsuario] = useState('');
    const [nombreUsuario, setNombreUsuario] = useState('');
    const [apellidosUsuario, setApellidosUsuario] = useState('');
    const [idPsicologo, setIdPsicologo] = useState('');
    const [nombrePsicologo, setNombrePsicologo] = useState('');
    const [apellidosPsicologo, setApellidosPsicologo] = useState('');
    const [emailPsicologo, setEmailPsicologo] = useState('');
    const [modal, setModal] = useState(false);


    const handleObjectClick = () => {

        const umbral = 2.5;

        //Obtenemos la posicion del jugador
        PlayerApi.position.subscribe((pos) => {
            playerPosition.current = pos;
        });

        //Calculamos la distancia entre el jugador y la mascota
        const distancia = Math.sqrt(
            Math.pow(playerPosition.current[0] - posicionPortatil[0], 2) +
            Math.pow(playerPosition.current[1] - posicionPortatil[1], 2) +
            Math.pow(playerPosition.current[2] - posicionPortatil[2], 2)
        );

        if (distancia < umbral) {
            toggle();
        }

    };



    useEffect(() => {

        Axios.get('http://localhost:3001/loginUsr').then((response) => {
            if (response.data.loggedIn === true && response.data.user.Psicologo === false) {

                setIdUsuario(response.data.user.Id);
                setNombreUsuario(response.data.user.Nombre);
                setApellidosUsuario(response.data.user.Apellidos);

                Axios.post('http://localhost:3001/getDataPsico', {

                    idUsuario: response.data.user.Id

                }).then((responsePsico) => {

                    setIdPsicologo(responsePsico.data.idPsicologo);
                    setNombrePsicologo(responsePsico.data.Nombre);
                    setApellidosPsicologo(responsePsico.data.Apellidos);
                    setEmailPsicologo(responsePsico.data.Email);

                });
            }
        });
    }, [idPsicologo]);


    const toggle = () => {
        setModal(!modal);
    }

    return (
        <>
            <group dispose={null} scale={0.005} position={posicionPortatil} onDoubleClick={handleObjectClick}>
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.ChamferBox017_1.geometry}
                    material={materials["03___Default"]}
                />
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.ChamferBox017_1_1.geometry}
                    material={colorMaterial}
                />
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.ChamferBox017_1_2.geometry}
                    material={materials["01___Default"]}
                />
                <mesh
                    castShadow
                    receiveShadow
                    geometry={nodes.ChamferBox017_1_3.geometry}
                    material={materials["04___Default"]}
                />
            </group>
            {modal && (<MensajesUsr modal={modal} toggle={toggle}
                idUsuario={idUsuario} nombreUsuario={nombreUsuario} apellidosUsuario={apellidosUsuario}
                idPsicologo={idPsicologo} nombrePsicologo={nombrePsicologo} apellidosPsicologo={apellidosPsicologo} emailPsicologo={emailPsicologo}
            />)}
        </>
    );
}

useGLTF.preload("/Portatil.glb");


